
Project_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800423c  0800423c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004244  08004244  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800424c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000074  080042c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080042c0  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf90  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efe  00000000  00000000  0002d034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002f978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204ee  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca5e  00000000  00000000  000507de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1653  00000000  00000000  0005d23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e88f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c74  00000000  00000000  0011e8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800414c 	.word	0x0800414c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800414c 	.word	0x0800414c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b09d      	sub	sp, #116	; 0x74
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fb52 	bl	8000c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f863 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f923 	bl	80007dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8f1 	bl	800077c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f8bf 	bl	800071c <MX_USART1_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart1, &counter, sizeof(counter), 500);

	  people2capacity = (counter_in- counter_out)*100 /capacity;
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <main+0xb8>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <main+0xbc>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	2264      	movs	r2, #100	; 0x64
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	4a24      	ldr	r2, [pc, #144]	; (8000644 <main+0xc0>)
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <main+0xc4>)
 80005bc:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "People Entered: %hu\r\nPeople Exited: %hu\r\nPeople Inside: %hu\r\nPeople To Capacity: %hu%%\r\n\r\n", counter_in, counter_out
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <main+0xb8>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <main+0xbc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461c      	mov	r4, r3
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <main+0xb8>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <main+0xbc>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <main+0xc4>)
 80005d8:	7812      	ldrb	r2, [r2, #0]
 80005da:	1d38      	adds	r0, r7, #4
 80005dc:	9201      	str	r2, [sp, #4]
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	4623      	mov	r3, r4
 80005e2:	460a      	mov	r2, r1
 80005e4:	4919      	ldr	r1, [pc, #100]	; (800064c <main+0xc8>)
 80005e6:	f003 f943 	bl	8003870 <siprintf>
			  , counter_in- counter_out, people2capacity);
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdef 	bl	80001d0 <strlen>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	1d39      	adds	r1, r7, #4
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <main+0xcc>)
 80005fe:	f002 f8e7 	bl	80027d0 <HAL_UART_Transmit>


	  if(people2capacity >= 100)
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <main+0xc4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b63      	cmp	r3, #99	; 0x63
 8000608:	d907      	bls.n	800061a <main+0x96>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f000 fea0 	bl	8001358 <HAL_GPIO_WritePin>
 8000618:	e006      	b.n	8000628 <main+0xa4>
	  else
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f000 fe98 	bl	8001358 <HAL_GPIO_WritePin>

	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000628:	2108      	movs	r1, #8
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <main+0xd0>)
 800062c:	f000 feac 	bl	8001388 <HAL_GPIO_TogglePin>
	  HAL_Delay(3000);
 8000630:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000634:	f000 fb72 	bl	8000d1c <HAL_Delay>
	  people2capacity = (counter_in- counter_out)*100 /capacity;
 8000638:	e7b1      	b.n	800059e <main+0x1a>
 800063a:	bf00      	nop
 800063c:	20000198 	.word	0x20000198
 8000640:	20000199 	.word	0x20000199
 8000644:	20000000 	.word	0x20000000
 8000648:	2000019a 	.word	0x2000019a
 800064c:	08004164 	.word	0x08004164
 8000650:	20000114 	.word	0x20000114
 8000654:	48000400 	.word	0x48000400

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	; 0x58
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2244      	movs	r2, #68	; 0x44
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f8fa 	bl	8003860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067e:	f000 fed3 	bl	8001428 <HAL_PWREx_ControlVoltageScaling>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000688:	f000 f948 	bl	800091c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068c:	f000 feae 	bl	80013ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <SystemClock_Config+0xc0>)
 8000692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000696:	4a20      	ldr	r2, [pc, #128]	; (8000718 <SystemClock_Config+0xc0>)
 8000698:	f023 0318 	bic.w	r3, r3, #24
 800069c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a0:	2314      	movs	r3, #20
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b0:	2360      	movs	r3, #96	; 0x60
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b8:	2301      	movs	r3, #1
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fefd 	bl	80014d4 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e0:	f000 f91c 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2303      	movs	r3, #3
 80006ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fafd 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000708:	f000 f908 	bl	800091c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800070c:	f001 ff10 	bl	8002530 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000710:	bf00      	nop
 8000712:	3758      	adds	r7, #88	; 0x58
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000

0800071c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <MX_USART1_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART1_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART1_UART_Init+0x58>)
 8000760:	f001 ffe8 	bl	8002734 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f8d7 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000090 	.word	0x20000090
 8000778:	40013800 	.word	0x40013800

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <MX_USART2_UART_Init+0x5c>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x58>)
 80007c0:	f001 ffb8 	bl	8002734 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 f8a7 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000114 	.word	0x20000114
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <MX_GPIO_Init+0xe8>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a33      	ldr	r2, [pc, #204]	; (80008c4 <MX_GPIO_Init+0xe8>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_GPIO_Init+0xe8>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a27      	ldr	r2, [pc, #156]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xe8>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f000 fd88 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2108      	movs	r1, #8
 800084c:	481e      	ldr	r0, [pc, #120]	; (80008c8 <MX_GPIO_Init+0xec>)
 800084e:	f000 fd83 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000852:	23c0      	movs	r3, #192	; 0xc0
 8000854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f000 fc0b 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800086e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f000 fbfb 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <MX_GPIO_Init+0xec>)
 80008a6:	f000 fbed 	bl	8001084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2017      	movs	r0, #23
 80008b0:	f000 fb33 	bl	8000f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008b4:	2017      	movs	r0, #23
 80008b6:	f000 fb4c 	bl	8000f52 <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_6)
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	2b40      	cmp	r3, #64	; 0x40
 80008da:	d105      	bne.n	80008e8 <HAL_GPIO_EXTI_Callback+0x1c>
		counter_in = counter_in+1;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_GPIO_EXTI_Callback+0x48>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_GPIO_EXTI_Callback+0x48>)
 80008e6:	701a      	strb	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_7)
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	2b80      	cmp	r3, #128	; 0x80
 80008ec:	d10b      	bne.n	8000906 <HAL_GPIO_EXTI_Callback+0x3a>
		if(counter_in!=counter_out)
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_GPIO_EXTI_Callback+0x48>)
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_GPIO_EXTI_Callback+0x4c>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d005      	beq.n	8000906 <HAL_GPIO_EXTI_Callback+0x3a>
			counter_out = counter_out+1;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <HAL_GPIO_EXTI_Callback+0x4c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000904:	701a      	strb	r2, [r3, #0]

}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000198 	.word	0x20000198
 8000918:	20000199 	.word	0x20000199

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	; 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0a0      	sub	sp, #128	; 0x80
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	2254      	movs	r2, #84	; 0x54
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f002 ff65 	bl	8003860 <memset>
  if(huart->Instance==USART1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a46      	ldr	r2, [pc, #280]	; (8000ab4 <HAL_UART_MspInit+0x144>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d140      	bne.n	8000a22 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fbc9 	bl	8002144 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009b8:	f7ff ffb0 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009bc:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 80009be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c0:	4a3d      	ldr	r2, [pc, #244]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6613      	str	r3, [r2, #96]	; 0x60
 80009c8:	4b3b      	ldr	r3, [pc, #236]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 80009ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 80009d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d8:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fe:	2307      	movs	r3, #7
 8000a00:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fb3a 	bl	8001084 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2025      	movs	r0, #37	; 0x25
 8000a16:	f000 fa80 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a1a:	2025      	movs	r0, #37	; 0x25
 8000a1c:	f000 fa99 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a20:	e043      	b.n	8000aaa <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <HAL_UART_MspInit+0x14c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d13e      	bne.n	8000aaa <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fb83 	bl	8002144 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000a44:	f7ff ff6a 	bl	800091c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 8000a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a52:	6593      	str	r3, [r2, #88]	; 0x58
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_UART_MspInit+0x148>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|GPIO_PIN_3;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 faf5 	bl	8001084 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2026      	movs	r0, #38	; 0x26
 8000aa0:	f000 fa3b 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa4:	2026      	movs	r0, #38	; 0x26
 8000aa6:	f000 fa54 	bl	8000f52 <HAL_NVIC_EnableIRQ>
}
 8000aaa:	bf00      	nop
 8000aac:	3780      	adds	r7, #128	; 0x80
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40013800 	.word	0x40013800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40004400 	.word	0x40004400

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f8e6 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b18:	2040      	movs	r0, #64	; 0x40
 8000b1a:	f000 fc4f 	bl	80013bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000b1e:	2080      	movs	r0, #128	; 0x80
 8000b20:	f000 fc4c 	bl	80013bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <USART1_IRQHandler+0x10>)
 8000b2e:	f001 fee3 	bl	80028f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000090 	.word	0x20000090

08000b3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <USART2_IRQHandler+0x10>)
 8000b42:	f001 fed9 	bl	80028f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000114 	.word	0x20000114

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f002 fe44 	bl	800380c <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20010000 	.word	0x20010000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	2000019c 	.word	0x2000019c
 8000bb8:	200001b8 	.word	0x200001b8

08000bbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be4:	f7ff ffea 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f002 fe03 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c12:	f7ff fcb7 	bl	8000584 <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c24:	0800424c 	.word	0x0800424c
  ldr r2, =_sbss
 8000c28:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c2c:	200001b4 	.word	0x200001b4

08000c30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_IRQHandler>

08000c32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f961 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f80e 	bl	8000c64 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	e001      	b.n	8000c58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c54:	f7ff fe68 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d023      	beq.n	8000cc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_InitTick+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f96d 	bl	8000f6e <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d10f      	bne.n	8000cba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d809      	bhi.n	8000cb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca8:	f000 f937 	bl	8000f1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_InitTick+0x74>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	e007      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e004      	b.n	8000cc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e001      	b.n	8000cc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	20000008 	.word	0x20000008

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	200001a0 	.word	0x200001a0

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200001a0 	.word	0x200001a0

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000000c 	.word	0x2000000c

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff29 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff3e 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff31 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d008      	beq.n	8000fb0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e022      	b.n	8000ff6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 020e 	bic.w	r2, r2, #14
 8000fbe:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0201 	bic.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd4:	f003 021c 	and.w	r2, r3, #28
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	2101      	movs	r1, #1
 8000fde:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d005      	beq.n	8001026 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2204      	movs	r2, #4
 800101e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e029      	b.n	800107a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 020e 	bic.w	r2, r2, #14
 8001034:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f003 021c 	and.w	r2, r3, #28
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	2101      	movs	r1, #1
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	4798      	blx	r3
    }
  }
  return status;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001092:	e148      	b.n	8001326 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 813a 	beq.w	8001320 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d005      	beq.n	80010c4 <HAL_GPIO_Init+0x40>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	f003 0201 	and.w	r2, r3, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b03      	cmp	r3, #3
 8001130:	d017      	beq.n	8001162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0203 	and.w	r2, r3, #3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8094 	beq.w	8001320 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	4b52      	ldr	r3, [pc, #328]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 80011fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fc:	4a51      	ldr	r2, [pc, #324]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6613      	str	r3, [r2, #96]	; 0x60
 8001204:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 8001206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001210:	4a4d      	ldr	r2, [pc, #308]	; (8001348 <HAL_GPIO_Init+0x2c4>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123a:	d00d      	beq.n	8001258 <HAL_GPIO_Init+0x1d4>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a43      	ldr	r2, [pc, #268]	; (800134c <HAL_GPIO_Init+0x2c8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d007      	beq.n	8001254 <HAL_GPIO_Init+0x1d0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a42      	ldr	r2, [pc, #264]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_GPIO_Init+0x1cc>
 800124c:	2302      	movs	r3, #2
 800124e:	e004      	b.n	800125a <HAL_GPIO_Init+0x1d6>
 8001250:	2307      	movs	r3, #7
 8001252:	e002      	b.n	800125a <HAL_GPIO_Init+0x1d6>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_GPIO_Init+0x1d6>
 8001258:	2300      	movs	r3, #0
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f002 0203 	and.w	r2, r2, #3
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	4093      	lsls	r3, r2
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800126a:	4937      	ldr	r1, [pc, #220]	; (8001348 <HAL_GPIO_Init+0x2c4>)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800129c:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f0:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	f47f aeaf 	bne.w	8001094 <HAL_GPIO_Init+0x10>
  }
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000
 800134c:	48000400 	.word	0x48000400
 8001350:	48000800 	.word	0x48000800
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001374:	e002      	b.n	800137c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43d9      	mvns	r1, r3
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	400b      	ands	r3, r1
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fa76 	bl	80008cc <HAL_GPIO_EXTI_Callback>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40007000 	.word	0x40007000

0800140c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_PWREx_GetVoltageRange+0x18>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40007000 	.word	0x40007000

08001428 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001436:	d130      	bne.n	800149a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001444:	d038      	beq.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001456:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2232      	movs	r2, #50	; 0x32
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9b      	lsrs	r3, r3, #18
 8001468:	3301      	adds	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146c:	e002      	b.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3b01      	subs	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001480:	d102      	bne.n	8001488 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f2      	bne.n	800146e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001494:	d110      	bne.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e00f      	b.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a6:	d007      	beq.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014b0:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40007000 	.word	0x40007000
 80014cc:	20000004 	.word	0x20000004
 80014d0:	431bde83 	.word	0x431bde83

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f000 bc02 	b.w	8001cec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e8:	4b96      	ldr	r3, [pc, #600]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f2:	4b94      	ldr	r3, [pc, #592]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80e4 	beq.w	80016d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <HAL_RCC_OscConfig+0x4c>
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b0c      	cmp	r3, #12
 8001514:	f040 808b 	bne.w	800162e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b01      	cmp	r3, #1
 800151c:	f040 8087 	bne.w	800162e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001520:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x64>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e3d9      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1a      	ldr	r2, [r3, #32]
 800153c:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_RCC_OscConfig+0x7e>
 8001548:	4b7e      	ldr	r3, [pc, #504]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001550:	e005      	b.n	800155e <HAL_RCC_OscConfig+0x8a>
 8001552:	4b7c      	ldr	r3, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800155e:	4293      	cmp	r3, r2
 8001560:	d223      	bcs.n	80015aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fd8c 	bl	8002084 <RCC_SetFlashLatencyFromMSIRange>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e3ba      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001576:	4b73      	ldr	r3, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a72      	ldr	r2, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b70      	ldr	r3, [pc, #448]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	496d      	ldr	r1, [pc, #436]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001594:	4b6b      	ldr	r3, [pc, #428]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	4968      	ldr	r1, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e025      	b.n	80015f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015aa:	4b66      	ldr	r3, [pc, #408]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a65      	ldr	r2, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b63      	ldr	r3, [pc, #396]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4960      	ldr	r1, [pc, #384]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c8:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	495b      	ldr	r1, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd4c 	bl	8002084 <RCC_SetFlashLatencyFromMSIRange>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e37a      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f6:	f000 fc81 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	4950      	ldr	r1, [pc, #320]	; (8001748 <HAL_RCC_OscConfig+0x274>)
 8001608:	5ccb      	ldrb	r3, [r1, r3]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	4a4e      	ldr	r2, [pc, #312]	; (800174c <HAL_RCC_OscConfig+0x278>)
 8001614:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001616:	4b4e      	ldr	r3, [pc, #312]	; (8001750 <HAL_RCC_OscConfig+0x27c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fb22 	bl	8000c64 <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d052      	beq.n	80016d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	e35e      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d032      	beq.n	800169c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001636:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a42      	ldr	r2, [pc, #264]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb5f 	bl	8000d04 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800164a:	f7ff fb5b 	bl	8000d04 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e347      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a35      	ldr	r2, [pc, #212]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b33      	ldr	r3, [pc, #204]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4930      	ldr	r1, [pc, #192]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001686:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	492b      	ldr	r1, [pc, #172]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e01a      	b.n	80016d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a28      	ldr	r2, [pc, #160]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb2c 	bl	8000d04 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b0:	f7ff fb28 	bl	8000d04 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e314      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1dc>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d073      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x21c>
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d10e      	bne.n	8001708 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d10b      	bne.n	8001708 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d063      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d15f      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e2f1      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d106      	bne.n	8001720 <HAL_RCC_OscConfig+0x24c>
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e025      	b.n	800176c <HAL_RCC_OscConfig+0x298>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001728:	d114      	bne.n	8001754 <HAL_RCC_OscConfig+0x280>
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a02      	ldr	r2, [pc, #8]	; (8001744 <HAL_RCC_OscConfig+0x270>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e013      	b.n	800176c <HAL_RCC_OscConfig+0x298>
 8001744:	40021000 	.word	0x40021000
 8001748:	080041c0 	.word	0x080041c0
 800174c:	20000004 	.word	0x20000004
 8001750:	20000008 	.word	0x20000008
 8001754:	4ba0      	ldr	r3, [pc, #640]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a9f      	ldr	r2, [pc, #636]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b9d      	ldr	r3, [pc, #628]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a9c      	ldr	r2, [pc, #624]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fac6 	bl	8000d04 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fac2 	bl	8000d04 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e2ae      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178e:	4b92      	ldr	r3, [pc, #584]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x2a8>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fab2 	bl	8000d04 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff faae 	bl	8000d04 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e29a      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b6:	4b88      	ldr	r3, [pc, #544]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2d0>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d060      	beq.n	8001894 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_OscConfig+0x310>
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d116      	bne.n	8001812 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e4:	4b7c      	ldr	r3, [pc, #496]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_OscConfig+0x328>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e277      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b76      	ldr	r3, [pc, #472]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	4973      	ldr	r1, [pc, #460]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	e040      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d023      	beq.n	8001862 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fa6d 	bl	8000d04 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fa69 	bl	8000d04 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e255      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	4b65      	ldr	r3, [pc, #404]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	495f      	ldr	r1, [pc, #380]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e018      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001862:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a5c      	ldr	r2, [pc, #368]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7ff fa49 	bl	8000d04 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff fa45 	bl	8000d04 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e231      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d03c      	beq.n	800191a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ae:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa24 	bl	8000d04 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff fa20 	bl	8000d04 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e20c      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ef      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3ec>
 80018e0:	e01b      	b.n	800191a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e8:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff fa07 	bl	8000d04 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa03 	bl	8000d04 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1ef      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800190c:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ef      	bne.n	80018fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80a6 	beq.w	8001a74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10d      	bne.n	8001954 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	4a26      	ldr	r2, [pc, #152]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	6593      	str	r3, [r2, #88]	; 0x58
 8001944:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001950:	2301      	movs	r3, #1
 8001952:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_RCC_OscConfig+0x508>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d118      	bne.n	8001992 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_RCC_OscConfig+0x508>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_RCC_OscConfig+0x508>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196c:	f7ff f9ca 	bl	8000d04 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001974:	f7ff f9c6 	bl	8000d04 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1b2      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_RCC_OscConfig+0x508>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_RCC_OscConfig+0x4d8>
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 800199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019aa:	e029      	b.n	8001a00 <HAL_RCC_OscConfig+0x52c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d115      	bne.n	80019e0 <HAL_RCC_OscConfig+0x50c>
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	4a03      	ldr	r2, [pc, #12]	; (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x52c>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40007000 	.word	0x40007000
 80019e0:	4b9a      	ldr	r3, [pc, #616]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	4a99      	ldr	r2, [pc, #612]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f0:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f6:	4a95      	ldr	r2, [pc, #596]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d016      	beq.n	8001a36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f97c 	bl	8000d04 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff f978 	bl	8000d04 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e162      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a26:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ed      	beq.n	8001a10 <HAL_RCC_OscConfig+0x53c>
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f965 	bl	8000d04 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f961 	bl	8000d04 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e14b      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a54:	4b7d      	ldr	r3, [pc, #500]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ed      	bne.n	8001a3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a62:	7ffb      	ldrb	r3, [r7, #31]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6c:	4a77      	ldr	r2, [pc, #476]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d03c      	beq.n	8001afa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a88:	4b70      	ldr	r3, [pc, #448]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a8e:	4a6f      	ldr	r2, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f934 	bl	8000d04 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa0:	f7ff f930 	bl	8000d04 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e11c      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ab2:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ef      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x5cc>
 8001ac0:	e01b      	b.n	8001afa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ac2:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ac8:	4a60      	ldr	r2, [pc, #384]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f917 	bl	8000d04 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ada:	f7ff f913 	bl	8000d04 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e0ff      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ef      	bne.n	8001ada <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80f3 	beq.w	8001cea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	f040 80c9 	bne.w	8001ca0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b0e:	4b4f      	ldr	r3, [pc, #316]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0203 	and.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d12c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d123      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d11b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d113      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	3b01      	subs	r3, #1
 8001b62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d109      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	3b01      	subs	r3, #1
 8001b76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d06b      	beq.n	8001c54 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d062      	beq.n	8001c48 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e0ac      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b9e:	f7ff f8b1 	bl	8000d04 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff f8ad 	bl	8000d04 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e099      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <HAL_RCC_OscConfig+0x77c>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bd4:	3a01      	subs	r2, #1
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bde:	0212      	lsls	r2, r2, #8
 8001be0:	4311      	orrs	r1, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001be6:	0852      	lsrs	r2, r2, #1
 8001be8:	3a01      	subs	r2, #1
 8001bea:	0552      	lsls	r2, r2, #21
 8001bec:	4311      	orrs	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bf2:	0852      	lsrs	r2, r2, #1
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	0652      	lsls	r2, r2, #25
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bfe:	06d2      	lsls	r2, r2, #27
 8001c00:	430a      	orrs	r2, r1
 8001c02:	4912      	ldr	r1, [pc, #72]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c20:	f7ff f870 	bl	8000d04 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f86c 	bl	8000d04 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e058      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HAL_RCC_OscConfig+0x778>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c46:	e050      	b.n	8001cea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e04f      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d144      	bne.n	8001cea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c78:	f7ff f844 	bl	8000d04 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f840 	bl	8000d04 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e02c      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x7ac>
 8001c9e:	e024      	b.n	8001cea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d01f      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001cac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f827 	bl	8000d04 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff f823 	bl	8000d04 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e00f      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f0      	bne.n	8001cba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	4905      	ldr	r1, [pc, #20]	; (8001cf4 <HAL_RCC_OscConfig+0x820>)
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x824>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
 8001ce4:	e001      	b.n	8001cea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	feeefffc 	.word	0xfeeefffc

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0e7      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4970      	ldr	r1, [pc, #448]	; (8001ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0cf      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b66      	ldr	r3, [pc, #408]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d908      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b63      	ldr	r3, [pc, #396]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4960      	ldr	r1, [pc, #384]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d04c      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d107      	bne.n	8001d92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d82:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d121      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0a6      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9a:	4b54      	ldr	r3, [pc, #336]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e09a      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db2:	4b4e      	ldr	r3, [pc, #312]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e08e      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e086      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b46      	ldr	r3, [pc, #280]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4943      	ldr	r1, [pc, #268]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de4:	f7fe ff8e 	bl	8000d04 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7fe ff8a 	bl	8000d04 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e06e      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d208      	bcs.n	8001e42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	492b      	ldr	r1, [pc, #172]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d210      	bcs.n	8001e72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 0207 	bic.w	r2, r3, #7
 8001e58:	4923      	ldr	r1, [pc, #140]	; (8001ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e60:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e036      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d008      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	4918      	ldr	r1, [pc, #96]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4910      	ldr	r1, [pc, #64]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb0:	f000 f824 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	490b      	ldr	r1, [pc, #44]	; (8001ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ece:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_ClockConfig+0x1fc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fec5 	bl	8000c64 <HAL_InitTick>
 8001eda:	4603      	mov	r3, r0
 8001edc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ede:	7afb      	ldrb	r3, [r7, #11]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	080041c0 	.word	0x080041c0
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	20000008 	.word	0x20000008

08001efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f14:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x34>
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b0c      	cmp	r3, #12
 8001f28:	d121      	bne.n	8001f6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d11e      	bne.n	8001f6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f30:	4b34      	ldr	r3, [pc, #208]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	e005      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f58:	4a2b      	ldr	r2, [pc, #172]	; (8002008 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10d      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d102      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	e004      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d134      	bne.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d003      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d003      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xac>
 8001fa0:	e005      	b.n	8001fae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa4:	617b      	str	r3, [r7, #20]
      break;
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fa8:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_RCC_GetSysClockFreq+0x114>)
 8001faa:	617b      	str	r3, [r7, #20]
      break;
 8001fac:	e002      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	617b      	str	r3, [r7, #20]
      break;
 8001fb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	fb03 f202 	mul.w	r2, r3, r2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	0e5b      	lsrs	r3, r3, #25
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	080041d8 	.word	0x080041d8
 800200c:	00f42400 	.word	0x00f42400
 8002010:	007a1200 	.word	0x007a1200

08002014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_RCC_GetHCLKFreq+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002030:	f7ff fff0 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4904      	ldr	r1, [pc, #16]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	080041d0 	.word	0x080041d0

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800205c:	f7ff ffda 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002060:	4602      	mov	r2, r0
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0adb      	lsrs	r3, r3, #11
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4904      	ldr	r1, [pc, #16]	; (8002080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800206e:	5ccb      	ldrb	r3, [r1, r3]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000
 8002080:	080041d0 	.word	0x080041d0

08002084 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800209c:	f7ff f9b6 	bl	800140c <HAL_PWREx_GetVoltageRange>
 80020a0:	6178      	str	r0, [r7, #20]
 80020a2:	e014      	b.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a24      	ldr	r2, [pc, #144]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020bc:	f7ff f9a6 	bl	800140c <HAL_PWREx_GetVoltageRange>
 80020c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	4a1d      	ldr	r2, [pc, #116]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d10b      	bne.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b80      	cmp	r3, #128	; 0x80
 80020da:	d919      	bls.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2ba0      	cmp	r3, #160	; 0xa0
 80020e0:	d902      	bls.n	80020e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e2:	2302      	movs	r3, #2
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e013      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020e8:	2301      	movs	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e010      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b80      	cmp	r3, #128	; 0x80
 80020f2:	d902      	bls.n	80020fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f4:	2303      	movs	r3, #3
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e00a      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d102      	bne.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002100:	2302      	movs	r3, #2
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e004      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b70      	cmp	r3, #112	; 0x70
 800210a:	d101      	bne.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800210c:	2301      	movs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 0207 	bic.w	r2, r3, #7
 8002118:	4909      	ldr	r1, [pc, #36]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	40022000 	.word	0x40022000

08002144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800214c:	2300      	movs	r3, #0
 800214e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002150:	2300      	movs	r3, #0
 8002152:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215c:	2b00      	cmp	r3, #0
 800215e:	d031      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002168:	d01a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800216a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800216e:	d814      	bhi.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002178:	d10f      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4a5c      	ldr	r2, [pc, #368]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002186:	e00c      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f9de 	bl	8002550 <RCCEx_PLLSAI1_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002198:	e003      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	74fb      	strb	r3, [r7, #19]
      break;
 800219e:	e000      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021a8:	4b51      	ldr	r3, [pc, #324]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	494e      	ldr	r1, [pc, #312]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021be:	e001      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 809e 	beq.w	800230e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d6:	4b46      	ldr	r3, [pc, #280]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80021e6:	2300      	movs	r3, #0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00d      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a3f      	ldr	r2, [pc, #252]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
 80021f8:	4b3d      	ldr	r3, [pc, #244]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002208:	4b3a      	ldr	r3, [pc, #232]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a39      	ldr	r2, [pc, #228]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002214:	f7fe fd76 	bl	8000d04 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800221a:	e009      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7fe fd72 	bl	8000d04 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d902      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	74fb      	strb	r3, [r7, #19]
        break;
 800222e:	e005      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002230:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ef      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d15a      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002242:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01e      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	429a      	cmp	r2, r3
 800225c:	d019      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002268:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800227a:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800228a:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d016      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fd32 	bl	8000d04 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	e00b      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7fe fd2e 	bl	8000d04 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d902      	bls.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	74fb      	strb	r3, [r7, #19]
            break;
 80022ba:	e006      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ec      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022de:	4904      	ldr	r1, [pc, #16]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022e6:	e009      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
 80022ec:	e006      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022fc:	7c7b      	ldrb	r3, [r7, #17]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d105      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002302:	4b8a      	ldr	r3, [pc, #552]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	4a89      	ldr	r2, [pc, #548]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800230c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800231a:	4b84      	ldr	r3, [pc, #528]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002320:	f023 0203 	bic.w	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4980      	ldr	r1, [pc, #512]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00a      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800233c:	4b7b      	ldr	r3, [pc, #492]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f023 020c 	bic.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	4978      	ldr	r1, [pc, #480]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800235e:	4b73      	ldr	r3, [pc, #460]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	496f      	ldr	r1, [pc, #444]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002380:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	4967      	ldr	r1, [pc, #412]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023a2:	4b62      	ldr	r3, [pc, #392]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	495e      	ldr	r1, [pc, #376]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	4956      	ldr	r1, [pc, #344]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d028      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4945      	ldr	r1, [pc, #276]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002426:	d106      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002428:	4b40      	ldr	r3, [pc, #256]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a3f      	ldr	r2, [pc, #252]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800242e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002432:	60d3      	str	r3, [r2, #12]
 8002434:	e011      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800243e:	d10c      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3304      	adds	r3, #4
 8002444:	2101      	movs	r1, #1
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f882 	bl	8002550 <RCCEx_PLLSAI1_Config>
 800244c:	4603      	mov	r3, r0
 800244e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d028      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	492d      	ldr	r1, [pc, #180]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002484:	d106      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002486:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800248c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002490:	60d3      	str	r3, [r2, #12]
 8002492:	e011      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	2101      	movs	r1, #1
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f853 	bl	8002550 <RCCEx_PLLSAI1_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01c      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d2:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024e2:	d10c      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3304      	adds	r3, #4
 80024e8:	2102      	movs	r1, #2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f830 	bl	8002550 <RCCEx_PLLSAI1_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	4904      	ldr	r1, [pc, #16]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002520:	7cbb      	ldrb	r3, [r7, #18]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000

08002550 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800255e:	4b74      	ldr	r3, [pc, #464]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d018      	beq.n	800259c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800256a:	4b71      	ldr	r3, [pc, #452]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0203 	and.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d10d      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
       ||
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002582:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
       ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d047      	beq.n	8002626 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	e044      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d018      	beq.n	80025d6 <RCCEx_PLLSAI1_Config+0x86>
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d825      	bhi.n	80025f4 <RCCEx_PLLSAI1_Config+0xa4>
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d002      	beq.n	80025b2 <RCCEx_PLLSAI1_Config+0x62>
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d009      	beq.n	80025c4 <RCCEx_PLLSAI1_Config+0x74>
 80025b0:	e020      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025b2:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11d      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c2:	e01a      	b.n	80025fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025c4:	4b5a      	ldr	r3, [pc, #360]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d116      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e013      	b.n	80025fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025d6:	4b56      	ldr	r3, [pc, #344]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025e2:	4b53      	ldr	r3, [pc, #332]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025f2:	e006      	b.n	8002602 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
      break;
 80025f8:	e004      	b.n	8002604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025fa:	bf00      	nop
 80025fc:	e002      	b.n	8002604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002602:	bf00      	nop
    }

    if(status == HAL_OK)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10d      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800260a:	4b49      	ldr	r3, [pc, #292]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	430b      	orrs	r3, r1
 8002620:	4943      	ldr	r1, [pc, #268]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002622:	4313      	orrs	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d17c      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a3f      	ldr	r2, [pc, #252]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7fe fb64 	bl	8000d04 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800263e:	e009      	b.n	8002654 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002640:	f7fe fb60 	bl	8000d04 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	73fb      	strb	r3, [r7, #15]
        break;
 8002652:	e005      	b.n	8002660 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ef      	bne.n	8002640 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d15f      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d110      	bne.n	800268e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002674:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6892      	ldr	r2, [r2, #8]
 800267c:	0211      	lsls	r1, r2, #8
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68d2      	ldr	r2, [r2, #12]
 8002682:	06d2      	lsls	r2, r2, #27
 8002684:	430a      	orrs	r2, r1
 8002686:	492a      	ldr	r1, [pc, #168]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	4313      	orrs	r3, r2
 800268a:	610b      	str	r3, [r1, #16]
 800268c:	e027      	b.n	80026de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d112      	bne.n	80026ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6912      	ldr	r2, [r2, #16]
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0552      	lsls	r2, r2, #21
 80026b0:	430a      	orrs	r2, r1
 80026b2:	491f      	ldr	r1, [pc, #124]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	610b      	str	r3, [r1, #16]
 80026b8:	e011      	b.n	80026de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6892      	ldr	r2, [r2, #8]
 80026ca:	0211      	lsls	r1, r2, #8
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6952      	ldr	r2, [r2, #20]
 80026d0:	0852      	lsrs	r2, r2, #1
 80026d2:	3a01      	subs	r2, #1
 80026d4:	0652      	lsls	r2, r2, #25
 80026d6:	430a      	orrs	r2, r1
 80026d8:	4915      	ldr	r1, [pc, #84]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a13      	ldr	r2, [pc, #76]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fb0b 	bl	8000d04 <HAL_GetTick>
 80026ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f0:	e009      	b.n	8002706 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026f2:	f7fe fb07 	bl	8000d04 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d902      	bls.n	8002706 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	73fb      	strb	r3, [r7, #15]
          break;
 8002704:	e005      	b.n	8002712 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ef      	beq.n	80026f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	4903      	ldr	r1, [pc, #12]	; (8002730 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e040      	b.n	80027c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7fe f90a 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	; 0x24
 8002760:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fbc2 	bl	8002efc <UART_SetConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fde2 	bl	8003354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800279e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fe69 	bl	8003498 <UART_CheckIdleState>
 80027c6:	4603      	mov	r3, r0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	f040 8082 	bne.w	80028ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_UART_Transmit+0x26>
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07a      	b.n	80028f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_UART_Transmit+0x38>
 8002804:	2302      	movs	r3, #2
 8002806:	e073      	b.n	80028f0 <HAL_UART_Transmit+0x120>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2221      	movs	r2, #33	; 0x21
 800281c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281e:	f7fe fa71 	bl	8000d04 <HAL_GetTick>
 8002822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d108      	bne.n	8002850 <HAL_UART_Transmit+0x80>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e003      	b.n	8002858 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002860:	e02d      	b.n	80028be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2200      	movs	r2, #0
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fe5c 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e039      	b.n	80028f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10b      	bne.n	800289a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	881a      	ldrh	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800288e:	b292      	uxth	r2, r2
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3302      	adds	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	e008      	b.n	80028ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b292      	uxth	r2, r2
 80028a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cb      	bne.n	8002862 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2140      	movs	r1, #64	; 0x40
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fe28 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e005      	b.n	80028f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
  }
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0ba      	sub	sp, #232	; 0xe8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800291e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002922:	f640 030f 	movw	r3, #2063	; 0x80f
 8002926:	4013      	ands	r3, r2
 8002928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800292c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d115      	bne.n	8002960 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00f      	beq.n	8002960 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 82a6 	beq.w	8002ea2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
      }
      return;
 800295e:	e2a0      	b.n	8002ea2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8117 	beq.w	8002b98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800296a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800297a:	4b85      	ldr	r3, [pc, #532]	; (8002b90 <HAL_UART_IRQHandler+0x298>)
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 810a 	beq.w	8002b98 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d011      	beq.n	80029b4 <HAL_UART_IRQHandler+0xbc>
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d011      	beq.n	80029e4 <HAL_UART_IRQHandler+0xec>
 80029c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2202      	movs	r2, #2
 80029d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029da:	f043 0204 	orr.w	r2, r3, #4
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_UART_IRQHandler+0x11c>
 80029f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2204      	movs	r2, #4
 8002a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a0a:	f043 0202 	orr.w	r2, r3, #2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a46:	f043 0208 	orr.w	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <HAL_UART_IRQHandler+0x18a>
 8002a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 820c 	beq.w	8002ea6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d005      	beq.n	8002ada <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d04f      	beq.n	8002b7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fde9 	bl	80036b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d141      	bne.n	8002b72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3308      	adds	r3, #8
 8002af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3308      	adds	r3, #8
 8002b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1d9      	bne.n	8002aee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d013      	beq.n	8002b6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <HAL_UART_IRQHandler+0x29c>)
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fa57 	bl	8001002 <HAL_DMA_Abort_IT>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e00f      	b.n	8002b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9b0 	bl	8002ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00b      	b.n	8002b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f9ac 	bl	8002ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e007      	b.n	8002b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f9a8 	bl	8002ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002b88:	e18d      	b.n	8002ea6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8a:	bf00      	nop
    return;
 8002b8c:	e18b      	b.n	8002ea6 <HAL_UART_IRQHandler+0x5ae>
 8002b8e:	bf00      	nop
 8002b90:	04000120 	.word	0x04000120
 8002b94:	08003779 	.word	0x08003779

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	f040 8146 	bne.w	8002e2e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 813f 	beq.w	8002e2e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8138 	beq.w	8002e2e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	f040 80b4 	bne.w	8002d3e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 815f 	beq.w	8002eaa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f080 8157 	bcs.w	8002eaa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 8085 	bne.w	8002d22 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c52:	e841 2300 	strex	r3, r2, [r1]
 8002c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1da      	bne.n	8002c18 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3308      	adds	r3, #8
 8002c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3308      	adds	r3, #8
 8002c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e1      	bne.n	8002c62 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e3      	bne.n	8002c9e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cea:	e853 3f00 	ldrex	r3, [r3]
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf2:	f023 0310 	bic.w	r3, r3, #16
 8002cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e4      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe f932 	bl	8000f86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8d4 	bl	8002ee4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d3c:	e0b5      	b.n	8002eaa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80a7 	beq.w	8002eae <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80a2 	beq.w	8002eae <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e4      	bne.n	8002d6a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3308      	adds	r3, #8
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	e853 3f00 	ldrex	r3, [r3]
 8002dae:	623b      	str	r3, [r7, #32]
   return(result);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dc4:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dcc:	e841 2300 	strex	r3, r2, [r1]
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e3      	bne.n	8002da0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0310 	bic.w	r3, r3, #16
 8002dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e4      	bne.n	8002dea <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f85c 	bl	8002ee4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e2c:	e03f      	b.n	8002eae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00e      	beq.n	8002e58 <HAL_UART_IRQHandler+0x560>
 8002e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fcd1 	bl	80037f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e56:	e02d      	b.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00e      	beq.n	8002e82 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01c      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
    }
    return;
 8002e80:	e017      	b.n	8002eb2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d012      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fc82 	bl	80037a4 <UART_EndTransmit_IT>
    return;
 8002ea0:	e008      	b.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002ea2:	bf00      	nop
 8002ea4:	e006      	b.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002ea6:	bf00      	nop
 8002ea8:	e004      	b.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002eaa:	bf00      	nop
 8002eac:	e002      	b.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002eb2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002eb4:	37e8      	adds	r7, #232	; 0xe8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop

08002ebc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f00:	b08a      	sub	sp, #40	; 0x28
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4bb4      	ldr	r3, [pc, #720]	; (80031fc <UART_SetConfig+0x300>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4aa9      	ldr	r2, [pc, #676]	; (8003200 <UART_SetConfig+0x304>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	4313      	orrs	r3, r2
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4aa0      	ldr	r2, [pc, #640]	; (8003204 <UART_SetConfig+0x308>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d126      	bne.n	8002fd4 <UART_SetConfig+0xd8>
 8002f86:	4ba0      	ldr	r3, [pc, #640]	; (8003208 <UART_SetConfig+0x30c>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d81b      	bhi.n	8002fcc <UART_SetConfig+0xd0>
 8002f94:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <UART_SetConfig+0xa0>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fad 	.word	0x08002fad
 8002fa0:	08002fbd 	.word	0x08002fbd
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fc5 	.word	0x08002fc5
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb2:	e080      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fba:	e07c      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc2:	e078      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fca:	e074      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd2:	e070      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a8c      	ldr	r2, [pc, #560]	; (800320c <UART_SetConfig+0x310>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d138      	bne.n	8003050 <UART_SetConfig+0x154>
 8002fde:	4b8a      	ldr	r3, [pc, #552]	; (8003208 <UART_SetConfig+0x30c>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d82d      	bhi.n	8003048 <UART_SetConfig+0x14c>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <UART_SetConfig+0xf8>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	08003049 	.word	0x08003049
 8002ffc:	08003049 	.word	0x08003049
 8003000:	08003049 	.word	0x08003049
 8003004:	08003039 	.word	0x08003039
 8003008:	08003049 	.word	0x08003049
 800300c:	08003049 	.word	0x08003049
 8003010:	08003049 	.word	0x08003049
 8003014:	08003031 	.word	0x08003031
 8003018:	08003049 	.word	0x08003049
 800301c:	08003049 	.word	0x08003049
 8003020:	08003049 	.word	0x08003049
 8003024:	08003041 	.word	0x08003041
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302e:	e042      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8003030:	2302      	movs	r3, #2
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003036:	e03e      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8003038:	2304      	movs	r3, #4
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303e:	e03a      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8003040:	2308      	movs	r3, #8
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003046:	e036      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8003048:	2310      	movs	r3, #16
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800304e:	e032      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6a      	ldr	r2, [pc, #424]	; (8003200 <UART_SetConfig+0x304>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d12a      	bne.n	80030b0 <UART_SetConfig+0x1b4>
 800305a:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <UART_SetConfig+0x30c>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003068:	d01a      	beq.n	80030a0 <UART_SetConfig+0x1a4>
 800306a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800306e:	d81b      	bhi.n	80030a8 <UART_SetConfig+0x1ac>
 8003070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003074:	d00c      	beq.n	8003090 <UART_SetConfig+0x194>
 8003076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307a:	d815      	bhi.n	80030a8 <UART_SetConfig+0x1ac>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <UART_SetConfig+0x18c>
 8003080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003084:	d008      	beq.n	8003098 <UART_SetConfig+0x19c>
 8003086:	e00f      	b.n	80030a8 <UART_SetConfig+0x1ac>
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308e:	e012      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8003090:	2302      	movs	r3, #2
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003096:	e00e      	b.n	80030b6 <UART_SetConfig+0x1ba>
 8003098:	2304      	movs	r3, #4
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309e:	e00a      	b.n	80030b6 <UART_SetConfig+0x1ba>
 80030a0:	2308      	movs	r3, #8
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a6:	e006      	b.n	80030b6 <UART_SetConfig+0x1ba>
 80030a8:	2310      	movs	r3, #16
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ae:	e002      	b.n	80030b6 <UART_SetConfig+0x1ba>
 80030b0:	2310      	movs	r3, #16
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a51      	ldr	r2, [pc, #324]	; (8003200 <UART_SetConfig+0x304>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d17a      	bne.n	80031b6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	d824      	bhi.n	8003112 <UART_SetConfig+0x216>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <UART_SetConfig+0x1d4>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030f5 	.word	0x080030f5
 80030d4:	08003113 	.word	0x08003113
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	08003113 	.word	0x08003113
 80030e0:	08003103 	.word	0x08003103
 80030e4:	08003113 	.word	0x08003113
 80030e8:	08003113 	.word	0x08003113
 80030ec:	08003113 	.word	0x08003113
 80030f0:	0800310b 	.word	0x0800310b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7fe ff9a 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 80030f8:	61f8      	str	r0, [r7, #28]
        break;
 80030fa:	e010      	b.n	800311e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030fc:	4b44      	ldr	r3, [pc, #272]	; (8003210 <UART_SetConfig+0x314>)
 80030fe:	61fb      	str	r3, [r7, #28]
        break;
 8003100:	e00d      	b.n	800311e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003102:	f7fe fefb 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8003106:	61f8      	str	r0, [r7, #28]
        break;
 8003108:	e009      	b.n	800311e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310e:	61fb      	str	r3, [r7, #28]
        break;
 8003110:	e005      	b.n	800311e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800311c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8107 	beq.w	8003334 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	429a      	cmp	r2, r3
 8003134:	d305      	bcc.n	8003142 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	429a      	cmp	r2, r3
 8003140:	d903      	bls.n	800314a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003148:	e0f4      	b.n	8003334 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	2200      	movs	r2, #0
 800314e:	461c      	mov	r4, r3
 8003150:	4615      	mov	r5, r2
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	022b      	lsls	r3, r5, #8
 800315c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003160:	0222      	lsls	r2, r4, #8
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	6849      	ldr	r1, [r1, #4]
 8003166:	0849      	lsrs	r1, r1, #1
 8003168:	2000      	movs	r0, #0
 800316a:	4688      	mov	r8, r1
 800316c:	4681      	mov	r9, r0
 800316e:	eb12 0a08 	adds.w	sl, r2, r8
 8003172:	eb43 0b09 	adc.w	fp, r3, r9
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003184:	4650      	mov	r0, sl
 8003186:	4659      	mov	r1, fp
 8003188:	f7fd f87a 	bl	8000280 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319a:	d308      	bcc.n	80031ae <UART_SetConfig+0x2b2>
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a2:	d204      	bcs.n	80031ae <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e0c2      	b.n	8003334 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031b4:	e0be      	b.n	8003334 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031be:	d16a      	bne.n	8003296 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80031c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d834      	bhi.n	8003232 <UART_SetConfig+0x336>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0x2d4>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031f5 	.word	0x080031f5
 80031d4:	08003215 	.word	0x08003215
 80031d8:	0800321d 	.word	0x0800321d
 80031dc:	08003233 	.word	0x08003233
 80031e0:	08003223 	.word	0x08003223
 80031e4:	08003233 	.word	0x08003233
 80031e8:	08003233 	.word	0x08003233
 80031ec:	08003233 	.word	0x08003233
 80031f0:	0800322b 	.word	0x0800322b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f4:	f7fe ff1a 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 80031f8:	61f8      	str	r0, [r7, #28]
        break;
 80031fa:	e020      	b.n	800323e <UART_SetConfig+0x342>
 80031fc:	efff69f3 	.word	0xefff69f3
 8003200:	40008000 	.word	0x40008000
 8003204:	40013800 	.word	0x40013800
 8003208:	40021000 	.word	0x40021000
 800320c:	40004400 	.word	0x40004400
 8003210:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7fe ff20 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8003218:	61f8      	str	r0, [r7, #28]
        break;
 800321a:	e010      	b.n	800323e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800321c:	4b4c      	ldr	r3, [pc, #304]	; (8003350 <UART_SetConfig+0x454>)
 800321e:	61fb      	str	r3, [r7, #28]
        break;
 8003220:	e00d      	b.n	800323e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003222:	f7fe fe6b 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8003226:	61f8      	str	r0, [r7, #28]
        break;
 8003228:	e009      	b.n	800323e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322e:	61fb      	str	r3, [r7, #28]
        break;
 8003230:	e005      	b.n	800323e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800323c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d077      	beq.n	8003334 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005a      	lsls	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	441a      	add	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d916      	bls.n	800328e <UART_SetConfig+0x392>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003266:	d212      	bcs.n	800328e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f023 030f 	bic.w	r3, r3, #15
 8003270:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	b29b      	uxth	r3, r3
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	b29a      	uxth	r2, r3
 800327e:	8afb      	ldrh	r3, [r7, #22]
 8003280:	4313      	orrs	r3, r2
 8003282:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	8afa      	ldrh	r2, [r7, #22]
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	e052      	b.n	8003334 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003294:	e04e      	b.n	8003334 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800329a:	2b08      	cmp	r3, #8
 800329c:	d827      	bhi.n	80032ee <UART_SetConfig+0x3f2>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0x3a8>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032d1 	.word	0x080032d1
 80032ac:	080032d9 	.word	0x080032d9
 80032b0:	080032ef 	.word	0x080032ef
 80032b4:	080032df 	.word	0x080032df
 80032b8:	080032ef 	.word	0x080032ef
 80032bc:	080032ef 	.word	0x080032ef
 80032c0:	080032ef 	.word	0x080032ef
 80032c4:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe feb0 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 80032cc:	61f8      	str	r0, [r7, #28]
        break;
 80032ce:	e014      	b.n	80032fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d0:	f7fe fec2 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80032d4:	61f8      	str	r0, [r7, #28]
        break;
 80032d6:	e010      	b.n	80032fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <UART_SetConfig+0x454>)
 80032da:	61fb      	str	r3, [r7, #28]
        break;
 80032dc:	e00d      	b.n	80032fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7fe fe0d 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 80032e2:	61f8      	str	r0, [r7, #28]
        break;
 80032e4:	e009      	b.n	80032fa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	61fb      	str	r3, [r7, #28]
        break;
 80032ec:	e005      	b.n	80032fa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032f8:	bf00      	nop
    }

    if (pclk != 0U)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d019      	beq.n	8003334 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	085a      	lsrs	r2, r3, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	441a      	add	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	d909      	bls.n	800332e <UART_SetConfig+0x432>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d205      	bcs.n	800332e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e002      	b.n	8003334 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003340:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003344:	4618      	mov	r0, r3
 8003346:	3728      	adds	r7, #40	; 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334e:	bf00      	nop
 8003350:	00f42400 	.word	0x00f42400

08003354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01a      	beq.n	800346a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d10a      	bne.n	800346a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a8:	f7fd fc2c 	bl	8000d04 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f82d 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e023      	b.n	8003522 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d10e      	bne.n	8003506 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f817 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e00d      	b.n	8003522 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b09c      	sub	sp, #112	; 0x70
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	e0a5      	b.n	8003688 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003542:	f000 80a1 	beq.w	8003688 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fd fbdd 	bl	8000d04 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <UART_WaitOnFlagUntilTimeout+0x32>
 8003556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003558:	2b00      	cmp	r3, #0
 800355a:	d13e      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800356a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800356c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003570:	667b      	str	r3, [r7, #100]	; 0x64
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800357c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003580:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e6      	bne.n	800355c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	3308      	adds	r3, #8
 8003594:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	663b      	str	r3, [r7, #96]	; 0x60
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3308      	adds	r3, #8
 80035ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80035b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2220      	movs	r2, #32
 80035cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e067      	b.n	80036aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d04f      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f6:	d147      	bne.n	8003688 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003600:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003616:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
 8003622:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e6      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3308      	adds	r3, #8
 800363a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	613b      	str	r3, [r7, #16]
   return(result);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	66bb      	str	r3, [r7, #104]	; 0x68
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003654:	623a      	str	r2, [r7, #32]
 8003656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	61bb      	str	r3, [r7, #24]
   return(result);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e010      	b.n	80036aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	f43f af4a 	beq.w	800353c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3770      	adds	r7, #112	; 0x70
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b095      	sub	sp, #84	; 0x54
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d8:	643b      	str	r3, [r7, #64]	; 0x40
 80036da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e6      	bne.n	80036ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	64bb      	str	r3, [r7, #72]	; 0x48
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3308      	adds	r3, #8
 800370a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800370c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e5      	bne.n	80036ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003724:	2b01      	cmp	r3, #1
 8003726:	d118      	bne.n	800375a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	60bb      	str	r3, [r7, #8]
   return(result);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f023 0310 	bic.w	r3, r3, #16
 800373c:	647b      	str	r3, [r7, #68]	; 0x44
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6979      	ldr	r1, [r7, #20]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	613b      	str	r3, [r7, #16]
   return(result);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e6      	bne.n	8003728 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800376c:	bf00      	nop
 800376e:	3754      	adds	r7, #84	; 0x54
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f7ff fb9a 	bl	8002ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	61bb      	str	r3, [r7, #24]
 80037cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6979      	ldr	r1, [r7, #20]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	613b      	str	r3, [r7, #16]
   return(result);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e6      	bne.n	80037ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fb66 	bl	8002ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <__errno>:
 800380c:	4b01      	ldr	r3, [pc, #4]	; (8003814 <__errno+0x8>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000010 	.word	0x20000010

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4d0d      	ldr	r5, [pc, #52]	; (8003850 <__libc_init_array+0x38>)
 800381c:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 800381e:	1b64      	subs	r4, r4, r5
 8003820:	10a4      	asrs	r4, r4, #2
 8003822:	2600      	movs	r6, #0
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	4d0b      	ldr	r5, [pc, #44]	; (8003858 <__libc_init_array+0x40>)
 800382a:	4c0c      	ldr	r4, [pc, #48]	; (800385c <__libc_init_array+0x44>)
 800382c:	f000 fc8e 	bl	800414c <_init>
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	2600      	movs	r6, #0
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	08004244 	.word	0x08004244
 8003854:	08004244 	.word	0x08004244
 8003858:	08004244 	.word	0x08004244
 800385c:	08004248 	.word	0x08004248

08003860 <memset>:
 8003860:	4402      	add	r2, r0
 8003862:	4603      	mov	r3, r0
 8003864:	4293      	cmp	r3, r2
 8003866:	d100      	bne.n	800386a <memset+0xa>
 8003868:	4770      	bx	lr
 800386a:	f803 1b01 	strb.w	r1, [r3], #1
 800386e:	e7f9      	b.n	8003864 <memset+0x4>

08003870 <siprintf>:
 8003870:	b40e      	push	{r1, r2, r3}
 8003872:	b500      	push	{lr}
 8003874:	b09c      	sub	sp, #112	; 0x70
 8003876:	ab1d      	add	r3, sp, #116	; 0x74
 8003878:	9002      	str	r0, [sp, #8]
 800387a:	9006      	str	r0, [sp, #24]
 800387c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003880:	4809      	ldr	r0, [pc, #36]	; (80038a8 <siprintf+0x38>)
 8003882:	9107      	str	r1, [sp, #28]
 8003884:	9104      	str	r1, [sp, #16]
 8003886:	4909      	ldr	r1, [pc, #36]	; (80038ac <siprintf+0x3c>)
 8003888:	f853 2b04 	ldr.w	r2, [r3], #4
 800388c:	9105      	str	r1, [sp, #20]
 800388e:	6800      	ldr	r0, [r0, #0]
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	a902      	add	r1, sp, #8
 8003894:	f000 f868 	bl	8003968 <_svfiprintf_r>
 8003898:	9b02      	ldr	r3, [sp, #8]
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	b01c      	add	sp, #112	; 0x70
 80038a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038a4:	b003      	add	sp, #12
 80038a6:	4770      	bx	lr
 80038a8:	20000010 	.word	0x20000010
 80038ac:	ffff0208 	.word	0xffff0208

080038b0 <__ssputs_r>:
 80038b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b4:	688e      	ldr	r6, [r1, #8]
 80038b6:	429e      	cmp	r6, r3
 80038b8:	4682      	mov	sl, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	4690      	mov	r8, r2
 80038be:	461f      	mov	r7, r3
 80038c0:	d838      	bhi.n	8003934 <__ssputs_r+0x84>
 80038c2:	898a      	ldrh	r2, [r1, #12]
 80038c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038c8:	d032      	beq.n	8003930 <__ssputs_r+0x80>
 80038ca:	6825      	ldr	r5, [r4, #0]
 80038cc:	6909      	ldr	r1, [r1, #16]
 80038ce:	eba5 0901 	sub.w	r9, r5, r1
 80038d2:	6965      	ldr	r5, [r4, #20]
 80038d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038dc:	3301      	adds	r3, #1
 80038de:	444b      	add	r3, r9
 80038e0:	106d      	asrs	r5, r5, #1
 80038e2:	429d      	cmp	r5, r3
 80038e4:	bf38      	it	cc
 80038e6:	461d      	movcc	r5, r3
 80038e8:	0553      	lsls	r3, r2, #21
 80038ea:	d531      	bpl.n	8003950 <__ssputs_r+0xa0>
 80038ec:	4629      	mov	r1, r5
 80038ee:	f000 fb63 	bl	8003fb8 <_malloc_r>
 80038f2:	4606      	mov	r6, r0
 80038f4:	b950      	cbnz	r0, 800390c <__ssputs_r+0x5c>
 80038f6:	230c      	movs	r3, #12
 80038f8:	f8ca 3000 	str.w	r3, [sl]
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003902:	81a3      	strh	r3, [r4, #12]
 8003904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800390c:	6921      	ldr	r1, [r4, #16]
 800390e:	464a      	mov	r2, r9
 8003910:	f000 fabe 	bl	8003e90 <memcpy>
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	6126      	str	r6, [r4, #16]
 8003922:	6165      	str	r5, [r4, #20]
 8003924:	444e      	add	r6, r9
 8003926:	eba5 0509 	sub.w	r5, r5, r9
 800392a:	6026      	str	r6, [r4, #0]
 800392c:	60a5      	str	r5, [r4, #8]
 800392e:	463e      	mov	r6, r7
 8003930:	42be      	cmp	r6, r7
 8003932:	d900      	bls.n	8003936 <__ssputs_r+0x86>
 8003934:	463e      	mov	r6, r7
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	4632      	mov	r2, r6
 800393a:	4641      	mov	r1, r8
 800393c:	f000 fab6 	bl	8003eac <memmove>
 8003940:	68a3      	ldr	r3, [r4, #8]
 8003942:	1b9b      	subs	r3, r3, r6
 8003944:	60a3      	str	r3, [r4, #8]
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	4433      	add	r3, r6
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	2000      	movs	r0, #0
 800394e:	e7db      	b.n	8003908 <__ssputs_r+0x58>
 8003950:	462a      	mov	r2, r5
 8003952:	f000 fba5 	bl	80040a0 <_realloc_r>
 8003956:	4606      	mov	r6, r0
 8003958:	2800      	cmp	r0, #0
 800395a:	d1e1      	bne.n	8003920 <__ssputs_r+0x70>
 800395c:	6921      	ldr	r1, [r4, #16]
 800395e:	4650      	mov	r0, sl
 8003960:	f000 fabe 	bl	8003ee0 <_free_r>
 8003964:	e7c7      	b.n	80038f6 <__ssputs_r+0x46>
	...

08003968 <_svfiprintf_r>:
 8003968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800396c:	4698      	mov	r8, r3
 800396e:	898b      	ldrh	r3, [r1, #12]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	b09d      	sub	sp, #116	; 0x74
 8003974:	4607      	mov	r7, r0
 8003976:	460d      	mov	r5, r1
 8003978:	4614      	mov	r4, r2
 800397a:	d50e      	bpl.n	800399a <_svfiprintf_r+0x32>
 800397c:	690b      	ldr	r3, [r1, #16]
 800397e:	b963      	cbnz	r3, 800399a <_svfiprintf_r+0x32>
 8003980:	2140      	movs	r1, #64	; 0x40
 8003982:	f000 fb19 	bl	8003fb8 <_malloc_r>
 8003986:	6028      	str	r0, [r5, #0]
 8003988:	6128      	str	r0, [r5, #16]
 800398a:	b920      	cbnz	r0, 8003996 <_svfiprintf_r+0x2e>
 800398c:	230c      	movs	r3, #12
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003994:	e0d1      	b.n	8003b3a <_svfiprintf_r+0x1d2>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	616b      	str	r3, [r5, #20]
 800399a:	2300      	movs	r3, #0
 800399c:	9309      	str	r3, [sp, #36]	; 0x24
 800399e:	2320      	movs	r3, #32
 80039a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80039a8:	2330      	movs	r3, #48	; 0x30
 80039aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b54 <_svfiprintf_r+0x1ec>
 80039ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039b2:	f04f 0901 	mov.w	r9, #1
 80039b6:	4623      	mov	r3, r4
 80039b8:	469a      	mov	sl, r3
 80039ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039be:	b10a      	cbz	r2, 80039c4 <_svfiprintf_r+0x5c>
 80039c0:	2a25      	cmp	r2, #37	; 0x25
 80039c2:	d1f9      	bne.n	80039b8 <_svfiprintf_r+0x50>
 80039c4:	ebba 0b04 	subs.w	fp, sl, r4
 80039c8:	d00b      	beq.n	80039e2 <_svfiprintf_r+0x7a>
 80039ca:	465b      	mov	r3, fp
 80039cc:	4622      	mov	r2, r4
 80039ce:	4629      	mov	r1, r5
 80039d0:	4638      	mov	r0, r7
 80039d2:	f7ff ff6d 	bl	80038b0 <__ssputs_r>
 80039d6:	3001      	adds	r0, #1
 80039d8:	f000 80aa 	beq.w	8003b30 <_svfiprintf_r+0x1c8>
 80039dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039de:	445a      	add	r2, fp
 80039e0:	9209      	str	r2, [sp, #36]	; 0x24
 80039e2:	f89a 3000 	ldrb.w	r3, [sl]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80a2 	beq.w	8003b30 <_svfiprintf_r+0x1c8>
 80039ec:	2300      	movs	r3, #0
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039f6:	f10a 0a01 	add.w	sl, sl, #1
 80039fa:	9304      	str	r3, [sp, #16]
 80039fc:	9307      	str	r3, [sp, #28]
 80039fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a02:	931a      	str	r3, [sp, #104]	; 0x68
 8003a04:	4654      	mov	r4, sl
 8003a06:	2205      	movs	r2, #5
 8003a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0c:	4851      	ldr	r0, [pc, #324]	; (8003b54 <_svfiprintf_r+0x1ec>)
 8003a0e:	f7fc fbe7 	bl	80001e0 <memchr>
 8003a12:	9a04      	ldr	r2, [sp, #16]
 8003a14:	b9d8      	cbnz	r0, 8003a4e <_svfiprintf_r+0xe6>
 8003a16:	06d0      	lsls	r0, r2, #27
 8003a18:	bf44      	itt	mi
 8003a1a:	2320      	movmi	r3, #32
 8003a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a20:	0711      	lsls	r1, r2, #28
 8003a22:	bf44      	itt	mi
 8003a24:	232b      	movmi	r3, #43	; 0x2b
 8003a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a30:	d015      	beq.n	8003a5e <_svfiprintf_r+0xf6>
 8003a32:	9a07      	ldr	r2, [sp, #28]
 8003a34:	4654      	mov	r4, sl
 8003a36:	2000      	movs	r0, #0
 8003a38:	f04f 0c0a 	mov.w	ip, #10
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a42:	3b30      	subs	r3, #48	; 0x30
 8003a44:	2b09      	cmp	r3, #9
 8003a46:	d94e      	bls.n	8003ae6 <_svfiprintf_r+0x17e>
 8003a48:	b1b0      	cbz	r0, 8003a78 <_svfiprintf_r+0x110>
 8003a4a:	9207      	str	r2, [sp, #28]
 8003a4c:	e014      	b.n	8003a78 <_svfiprintf_r+0x110>
 8003a4e:	eba0 0308 	sub.w	r3, r0, r8
 8003a52:	fa09 f303 	lsl.w	r3, r9, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	46a2      	mov	sl, r4
 8003a5c:	e7d2      	b.n	8003a04 <_svfiprintf_r+0x9c>
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	1d19      	adds	r1, r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9103      	str	r1, [sp, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfbb      	ittet	lt
 8003a6a:	425b      	neglt	r3, r3
 8003a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a70:	9307      	strge	r3, [sp, #28]
 8003a72:	9307      	strlt	r3, [sp, #28]
 8003a74:	bfb8      	it	lt
 8003a76:	9204      	strlt	r2, [sp, #16]
 8003a78:	7823      	ldrb	r3, [r4, #0]
 8003a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a7c:	d10c      	bne.n	8003a98 <_svfiprintf_r+0x130>
 8003a7e:	7863      	ldrb	r3, [r4, #1]
 8003a80:	2b2a      	cmp	r3, #42	; 0x2a
 8003a82:	d135      	bne.n	8003af0 <_svfiprintf_r+0x188>
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	9203      	str	r2, [sp, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bfb8      	it	lt
 8003a90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a94:	3402      	adds	r4, #2
 8003a96:	9305      	str	r3, [sp, #20]
 8003a98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b64 <_svfiprintf_r+0x1fc>
 8003a9c:	7821      	ldrb	r1, [r4, #0]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	f7fc fb9d 	bl	80001e0 <memchr>
 8003aa6:	b140      	cbz	r0, 8003aba <_svfiprintf_r+0x152>
 8003aa8:	2340      	movs	r3, #64	; 0x40
 8003aaa:	eba0 000a 	sub.w	r0, r0, sl
 8003aae:	fa03 f000 	lsl.w	r0, r3, r0
 8003ab2:	9b04      	ldr	r3, [sp, #16]
 8003ab4:	4303      	orrs	r3, r0
 8003ab6:	3401      	adds	r4, #1
 8003ab8:	9304      	str	r3, [sp, #16]
 8003aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003abe:	4826      	ldr	r0, [pc, #152]	; (8003b58 <_svfiprintf_r+0x1f0>)
 8003ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ac4:	2206      	movs	r2, #6
 8003ac6:	f7fc fb8b 	bl	80001e0 <memchr>
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d038      	beq.n	8003b40 <_svfiprintf_r+0x1d8>
 8003ace:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <_svfiprintf_r+0x1f4>)
 8003ad0:	bb1b      	cbnz	r3, 8003b1a <_svfiprintf_r+0x1b2>
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	f023 0307 	bic.w	r3, r3, #7
 8003ada:	3308      	adds	r3, #8
 8003adc:	9303      	str	r3, [sp, #12]
 8003ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae0:	4433      	add	r3, r6
 8003ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae4:	e767      	b.n	80039b6 <_svfiprintf_r+0x4e>
 8003ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aea:	460c      	mov	r4, r1
 8003aec:	2001      	movs	r0, #1
 8003aee:	e7a5      	b.n	8003a3c <_svfiprintf_r+0xd4>
 8003af0:	2300      	movs	r3, #0
 8003af2:	3401      	adds	r4, #1
 8003af4:	9305      	str	r3, [sp, #20]
 8003af6:	4619      	mov	r1, r3
 8003af8:	f04f 0c0a 	mov.w	ip, #10
 8003afc:	4620      	mov	r0, r4
 8003afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b02:	3a30      	subs	r2, #48	; 0x30
 8003b04:	2a09      	cmp	r2, #9
 8003b06:	d903      	bls.n	8003b10 <_svfiprintf_r+0x1a8>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0c5      	beq.n	8003a98 <_svfiprintf_r+0x130>
 8003b0c:	9105      	str	r1, [sp, #20]
 8003b0e:	e7c3      	b.n	8003a98 <_svfiprintf_r+0x130>
 8003b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b14:	4604      	mov	r4, r0
 8003b16:	2301      	movs	r3, #1
 8003b18:	e7f0      	b.n	8003afc <_svfiprintf_r+0x194>
 8003b1a:	ab03      	add	r3, sp, #12
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	462a      	mov	r2, r5
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <_svfiprintf_r+0x1f8>)
 8003b22:	a904      	add	r1, sp, #16
 8003b24:	4638      	mov	r0, r7
 8003b26:	f3af 8000 	nop.w
 8003b2a:	1c42      	adds	r2, r0, #1
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	d1d6      	bne.n	8003ade <_svfiprintf_r+0x176>
 8003b30:	89ab      	ldrh	r3, [r5, #12]
 8003b32:	065b      	lsls	r3, r3, #25
 8003b34:	f53f af2c 	bmi.w	8003990 <_svfiprintf_r+0x28>
 8003b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b3a:	b01d      	add	sp, #116	; 0x74
 8003b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b40:	ab03      	add	r3, sp, #12
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	462a      	mov	r2, r5
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <_svfiprintf_r+0x1f8>)
 8003b48:	a904      	add	r1, sp, #16
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	f000 f87a 	bl	8003c44 <_printf_i>
 8003b50:	e7eb      	b.n	8003b2a <_svfiprintf_r+0x1c2>
 8003b52:	bf00      	nop
 8003b54:	08004208 	.word	0x08004208
 8003b58:	08004212 	.word	0x08004212
 8003b5c:	00000000 	.word	0x00000000
 8003b60:	080038b1 	.word	0x080038b1
 8003b64:	0800420e 	.word	0x0800420e

08003b68 <_printf_common>:
 8003b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6c:	4616      	mov	r6, r2
 8003b6e:	4699      	mov	r9, r3
 8003b70:	688a      	ldr	r2, [r1, #8]
 8003b72:	690b      	ldr	r3, [r1, #16]
 8003b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bfb8      	it	lt
 8003b7c:	4613      	movlt	r3, r2
 8003b7e:	6033      	str	r3, [r6, #0]
 8003b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b84:	4607      	mov	r7, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	b10a      	cbz	r2, 8003b8e <_printf_common+0x26>
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	0699      	lsls	r1, r3, #26
 8003b92:	bf42      	ittt	mi
 8003b94:	6833      	ldrmi	r3, [r6, #0]
 8003b96:	3302      	addmi	r3, #2
 8003b98:	6033      	strmi	r3, [r6, #0]
 8003b9a:	6825      	ldr	r5, [r4, #0]
 8003b9c:	f015 0506 	ands.w	r5, r5, #6
 8003ba0:	d106      	bne.n	8003bb0 <_printf_common+0x48>
 8003ba2:	f104 0a19 	add.w	sl, r4, #25
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	6832      	ldr	r2, [r6, #0]
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dc26      	bgt.n	8003bfe <_printf_common+0x96>
 8003bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bb4:	1e13      	subs	r3, r2, #0
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	bf18      	it	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	0692      	lsls	r2, r2, #26
 8003bbe:	d42b      	bmi.n	8003c18 <_printf_common+0xb0>
 8003bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c0      	blx	r8
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d01e      	beq.n	8003c0c <_printf_common+0xa4>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	68e5      	ldr	r5, [r4, #12]
 8003bd2:	6832      	ldr	r2, [r6, #0]
 8003bd4:	f003 0306 	and.w	r3, r3, #6
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	bf08      	it	eq
 8003bdc:	1aad      	subeq	r5, r5, r2
 8003bde:	68a3      	ldr	r3, [r4, #8]
 8003be0:	6922      	ldr	r2, [r4, #16]
 8003be2:	bf0c      	ite	eq
 8003be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be8:	2500      	movne	r5, #0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	bfc4      	itt	gt
 8003bee:	1a9b      	subgt	r3, r3, r2
 8003bf0:	18ed      	addgt	r5, r5, r3
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	341a      	adds	r4, #26
 8003bf6:	42b5      	cmp	r5, r6
 8003bf8:	d11a      	bne.n	8003c30 <_printf_common+0xc8>
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e008      	b.n	8003c10 <_printf_common+0xa8>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4652      	mov	r2, sl
 8003c02:	4649      	mov	r1, r9
 8003c04:	4638      	mov	r0, r7
 8003c06:	47c0      	blx	r8
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_printf_common+0xac>
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	3501      	adds	r5, #1
 8003c16:	e7c6      	b.n	8003ba6 <_printf_common+0x3e>
 8003c18:	18e1      	adds	r1, r4, r3
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	2030      	movs	r0, #48	; 0x30
 8003c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c22:	4422      	add	r2, r4
 8003c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	e7c7      	b.n	8003bc0 <_printf_common+0x58>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4622      	mov	r2, r4
 8003c34:	4649      	mov	r1, r9
 8003c36:	4638      	mov	r0, r7
 8003c38:	47c0      	blx	r8
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0e6      	beq.n	8003c0c <_printf_common+0xa4>
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7d9      	b.n	8003bf6 <_printf_common+0x8e>
	...

08003c44 <_printf_i>:
 8003c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	7e0f      	ldrb	r7, [r1, #24]
 8003c4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c4c:	2f78      	cmp	r7, #120	; 0x78
 8003c4e:	4691      	mov	r9, r2
 8003c50:	4680      	mov	r8, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	469a      	mov	sl, r3
 8003c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c5a:	d807      	bhi.n	8003c6c <_printf_i+0x28>
 8003c5c:	2f62      	cmp	r7, #98	; 0x62
 8003c5e:	d80a      	bhi.n	8003c76 <_printf_i+0x32>
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	f000 80d8 	beq.w	8003e16 <_printf_i+0x1d2>
 8003c66:	2f58      	cmp	r7, #88	; 0x58
 8003c68:	f000 80a3 	beq.w	8003db2 <_printf_i+0x16e>
 8003c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c74:	e03a      	b.n	8003cec <_printf_i+0xa8>
 8003c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c7a:	2b15      	cmp	r3, #21
 8003c7c:	d8f6      	bhi.n	8003c6c <_printf_i+0x28>
 8003c7e:	a101      	add	r1, pc, #4	; (adr r1, 8003c84 <_printf_i+0x40>)
 8003c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cf1 	.word	0x08003cf1
 8003c8c:	08003c6d 	.word	0x08003c6d
 8003c90:	08003c6d 	.word	0x08003c6d
 8003c94:	08003c6d 	.word	0x08003c6d
 8003c98:	08003c6d 	.word	0x08003c6d
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003c6d 	.word	0x08003c6d
 8003ca4:	08003c6d 	.word	0x08003c6d
 8003ca8:	08003c6d 	.word	0x08003c6d
 8003cac:	08003c6d 	.word	0x08003c6d
 8003cb0:	08003dfd 	.word	0x08003dfd
 8003cb4:	08003d21 	.word	0x08003d21
 8003cb8:	08003ddf 	.word	0x08003ddf
 8003cbc:	08003c6d 	.word	0x08003c6d
 8003cc0:	08003c6d 	.word	0x08003c6d
 8003cc4:	08003e1f 	.word	0x08003e1f
 8003cc8:	08003c6d 	.word	0x08003c6d
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003c6d 	.word	0x08003c6d
 8003cd4:	08003c6d 	.word	0x08003c6d
 8003cd8:	08003de7 	.word	0x08003de7
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	602a      	str	r2, [r5, #0]
 8003ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0a3      	b.n	8003e38 <_printf_i+0x1f4>
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	6829      	ldr	r1, [r5, #0]
 8003cf4:	0606      	lsls	r6, r0, #24
 8003cf6:	f101 0304 	add.w	r3, r1, #4
 8003cfa:	d50a      	bpl.n	8003d12 <_printf_i+0xce>
 8003cfc:	680e      	ldr	r6, [r1, #0]
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	2e00      	cmp	r6, #0
 8003d02:	da03      	bge.n	8003d0c <_printf_i+0xc8>
 8003d04:	232d      	movs	r3, #45	; 0x2d
 8003d06:	4276      	negs	r6, r6
 8003d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d0c:	485e      	ldr	r0, [pc, #376]	; (8003e88 <_printf_i+0x244>)
 8003d0e:	230a      	movs	r3, #10
 8003d10:	e019      	b.n	8003d46 <_printf_i+0x102>
 8003d12:	680e      	ldr	r6, [r1, #0]
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d1a:	bf18      	it	ne
 8003d1c:	b236      	sxthne	r6, r6
 8003d1e:	e7ef      	b.n	8003d00 <_printf_i+0xbc>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	6820      	ldr	r0, [r4, #0]
 8003d24:	1d19      	adds	r1, r3, #4
 8003d26:	6029      	str	r1, [r5, #0]
 8003d28:	0601      	lsls	r1, r0, #24
 8003d2a:	d501      	bpl.n	8003d30 <_printf_i+0xec>
 8003d2c:	681e      	ldr	r6, [r3, #0]
 8003d2e:	e002      	b.n	8003d36 <_printf_i+0xf2>
 8003d30:	0646      	lsls	r6, r0, #25
 8003d32:	d5fb      	bpl.n	8003d2c <_printf_i+0xe8>
 8003d34:	881e      	ldrh	r6, [r3, #0]
 8003d36:	4854      	ldr	r0, [pc, #336]	; (8003e88 <_printf_i+0x244>)
 8003d38:	2f6f      	cmp	r7, #111	; 0x6f
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2308      	moveq	r3, #8
 8003d3e:	230a      	movne	r3, #10
 8003d40:	2100      	movs	r1, #0
 8003d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d46:	6865      	ldr	r5, [r4, #4]
 8003d48:	60a5      	str	r5, [r4, #8]
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	bfa2      	ittt	ge
 8003d4e:	6821      	ldrge	r1, [r4, #0]
 8003d50:	f021 0104 	bicge.w	r1, r1, #4
 8003d54:	6021      	strge	r1, [r4, #0]
 8003d56:	b90e      	cbnz	r6, 8003d5c <_printf_i+0x118>
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	d04d      	beq.n	8003df8 <_printf_i+0x1b4>
 8003d5c:	4615      	mov	r5, r2
 8003d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d62:	fb03 6711 	mls	r7, r3, r1, r6
 8003d66:	5dc7      	ldrb	r7, [r0, r7]
 8003d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d6c:	4637      	mov	r7, r6
 8003d6e:	42bb      	cmp	r3, r7
 8003d70:	460e      	mov	r6, r1
 8003d72:	d9f4      	bls.n	8003d5e <_printf_i+0x11a>
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10b      	bne.n	8003d90 <_printf_i+0x14c>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	07de      	lsls	r6, r3, #31
 8003d7c:	d508      	bpl.n	8003d90 <_printf_i+0x14c>
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6861      	ldr	r1, [r4, #4]
 8003d82:	4299      	cmp	r1, r3
 8003d84:	bfde      	ittt	le
 8003d86:	2330      	movle	r3, #48	; 0x30
 8003d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d90:	1b52      	subs	r2, r2, r5
 8003d92:	6122      	str	r2, [r4, #16]
 8003d94:	f8cd a000 	str.w	sl, [sp]
 8003d98:	464b      	mov	r3, r9
 8003d9a:	aa03      	add	r2, sp, #12
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4640      	mov	r0, r8
 8003da0:	f7ff fee2 	bl	8003b68 <_printf_common>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d14c      	bne.n	8003e42 <_printf_i+0x1fe>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dac:	b004      	add	sp, #16
 8003dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db2:	4835      	ldr	r0, [pc, #212]	; (8003e88 <_printf_i+0x244>)
 8003db4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003db8:	6829      	ldr	r1, [r5, #0]
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dc0:	6029      	str	r1, [r5, #0]
 8003dc2:	061d      	lsls	r5, r3, #24
 8003dc4:	d514      	bpl.n	8003df0 <_printf_i+0x1ac>
 8003dc6:	07df      	lsls	r7, r3, #31
 8003dc8:	bf44      	itt	mi
 8003dca:	f043 0320 	orrmi.w	r3, r3, #32
 8003dce:	6023      	strmi	r3, [r4, #0]
 8003dd0:	b91e      	cbnz	r6, 8003dda <_printf_i+0x196>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	f023 0320 	bic.w	r3, r3, #32
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	2310      	movs	r3, #16
 8003ddc:	e7b0      	b.n	8003d40 <_printf_i+0xfc>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	f043 0320 	orr.w	r3, r3, #32
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	2378      	movs	r3, #120	; 0x78
 8003de8:	4828      	ldr	r0, [pc, #160]	; (8003e8c <_printf_i+0x248>)
 8003dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dee:	e7e3      	b.n	8003db8 <_printf_i+0x174>
 8003df0:	0659      	lsls	r1, r3, #25
 8003df2:	bf48      	it	mi
 8003df4:	b2b6      	uxthmi	r6, r6
 8003df6:	e7e6      	b.n	8003dc6 <_printf_i+0x182>
 8003df8:	4615      	mov	r5, r2
 8003dfa:	e7bb      	b.n	8003d74 <_printf_i+0x130>
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	6826      	ldr	r6, [r4, #0]
 8003e00:	6961      	ldr	r1, [r4, #20]
 8003e02:	1d18      	adds	r0, r3, #4
 8003e04:	6028      	str	r0, [r5, #0]
 8003e06:	0635      	lsls	r5, r6, #24
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	d501      	bpl.n	8003e10 <_printf_i+0x1cc>
 8003e0c:	6019      	str	r1, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <_printf_i+0x1d2>
 8003e10:	0670      	lsls	r0, r6, #25
 8003e12:	d5fb      	bpl.n	8003e0c <_printf_i+0x1c8>
 8003e14:	8019      	strh	r1, [r3, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	6123      	str	r3, [r4, #16]
 8003e1a:	4615      	mov	r5, r2
 8003e1c:	e7ba      	b.n	8003d94 <_printf_i+0x150>
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	1d1a      	adds	r2, r3, #4
 8003e22:	602a      	str	r2, [r5, #0]
 8003e24:	681d      	ldr	r5, [r3, #0]
 8003e26:	6862      	ldr	r2, [r4, #4]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f7fc f9d8 	bl	80001e0 <memchr>
 8003e30:	b108      	cbz	r0, 8003e36 <_printf_i+0x1f2>
 8003e32:	1b40      	subs	r0, r0, r5
 8003e34:	6060      	str	r0, [r4, #4]
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	6123      	str	r3, [r4, #16]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e40:	e7a8      	b.n	8003d94 <_printf_i+0x150>
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	462a      	mov	r2, r5
 8003e46:	4649      	mov	r1, r9
 8003e48:	4640      	mov	r0, r8
 8003e4a:	47d0      	blx	sl
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d0ab      	beq.n	8003da8 <_printf_i+0x164>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	079b      	lsls	r3, r3, #30
 8003e54:	d413      	bmi.n	8003e7e <_printf_i+0x23a>
 8003e56:	68e0      	ldr	r0, [r4, #12]
 8003e58:	9b03      	ldr	r3, [sp, #12]
 8003e5a:	4298      	cmp	r0, r3
 8003e5c:	bfb8      	it	lt
 8003e5e:	4618      	movlt	r0, r3
 8003e60:	e7a4      	b.n	8003dac <_printf_i+0x168>
 8003e62:	2301      	movs	r3, #1
 8003e64:	4632      	mov	r2, r6
 8003e66:	4649      	mov	r1, r9
 8003e68:	4640      	mov	r0, r8
 8003e6a:	47d0      	blx	sl
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d09b      	beq.n	8003da8 <_printf_i+0x164>
 8003e70:	3501      	adds	r5, #1
 8003e72:	68e3      	ldr	r3, [r4, #12]
 8003e74:	9903      	ldr	r1, [sp, #12]
 8003e76:	1a5b      	subs	r3, r3, r1
 8003e78:	42ab      	cmp	r3, r5
 8003e7a:	dcf2      	bgt.n	8003e62 <_printf_i+0x21e>
 8003e7c:	e7eb      	b.n	8003e56 <_printf_i+0x212>
 8003e7e:	2500      	movs	r5, #0
 8003e80:	f104 0619 	add.w	r6, r4, #25
 8003e84:	e7f5      	b.n	8003e72 <_printf_i+0x22e>
 8003e86:	bf00      	nop
 8003e88:	08004219 	.word	0x08004219
 8003e8c:	0800422a 	.word	0x0800422a

08003e90 <memcpy>:
 8003e90:	440a      	add	r2, r1
 8003e92:	4291      	cmp	r1, r2
 8003e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e98:	d100      	bne.n	8003e9c <memcpy+0xc>
 8003e9a:	4770      	bx	lr
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ea6:	4291      	cmp	r1, r2
 8003ea8:	d1f9      	bne.n	8003e9e <memcpy+0xe>
 8003eaa:	bd10      	pop	{r4, pc}

08003eac <memmove>:
 8003eac:	4288      	cmp	r0, r1
 8003eae:	b510      	push	{r4, lr}
 8003eb0:	eb01 0402 	add.w	r4, r1, r2
 8003eb4:	d902      	bls.n	8003ebc <memmove+0x10>
 8003eb6:	4284      	cmp	r4, r0
 8003eb8:	4623      	mov	r3, r4
 8003eba:	d807      	bhi.n	8003ecc <memmove+0x20>
 8003ebc:	1e43      	subs	r3, r0, #1
 8003ebe:	42a1      	cmp	r1, r4
 8003ec0:	d008      	beq.n	8003ed4 <memmove+0x28>
 8003ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eca:	e7f8      	b.n	8003ebe <memmove+0x12>
 8003ecc:	4402      	add	r2, r0
 8003ece:	4601      	mov	r1, r0
 8003ed0:	428a      	cmp	r2, r1
 8003ed2:	d100      	bne.n	8003ed6 <memmove+0x2a>
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ede:	e7f7      	b.n	8003ed0 <memmove+0x24>

08003ee0 <_free_r>:
 8003ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ee2:	2900      	cmp	r1, #0
 8003ee4:	d044      	beq.n	8003f70 <_free_r+0x90>
 8003ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eea:	9001      	str	r0, [sp, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f1a1 0404 	sub.w	r4, r1, #4
 8003ef2:	bfb8      	it	lt
 8003ef4:	18e4      	addlt	r4, r4, r3
 8003ef6:	f000 f913 	bl	8004120 <__malloc_lock>
 8003efa:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <_free_r+0x94>)
 8003efc:	9801      	ldr	r0, [sp, #4]
 8003efe:	6813      	ldr	r3, [r2, #0]
 8003f00:	b933      	cbnz	r3, 8003f10 <_free_r+0x30>
 8003f02:	6063      	str	r3, [r4, #4]
 8003f04:	6014      	str	r4, [r2, #0]
 8003f06:	b003      	add	sp, #12
 8003f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f0c:	f000 b90e 	b.w	800412c <__malloc_unlock>
 8003f10:	42a3      	cmp	r3, r4
 8003f12:	d908      	bls.n	8003f26 <_free_r+0x46>
 8003f14:	6825      	ldr	r5, [r4, #0]
 8003f16:	1961      	adds	r1, r4, r5
 8003f18:	428b      	cmp	r3, r1
 8003f1a:	bf01      	itttt	eq
 8003f1c:	6819      	ldreq	r1, [r3, #0]
 8003f1e:	685b      	ldreq	r3, [r3, #4]
 8003f20:	1949      	addeq	r1, r1, r5
 8003f22:	6021      	streq	r1, [r4, #0]
 8003f24:	e7ed      	b.n	8003f02 <_free_r+0x22>
 8003f26:	461a      	mov	r2, r3
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	b10b      	cbz	r3, 8003f30 <_free_r+0x50>
 8003f2c:	42a3      	cmp	r3, r4
 8003f2e:	d9fa      	bls.n	8003f26 <_free_r+0x46>
 8003f30:	6811      	ldr	r1, [r2, #0]
 8003f32:	1855      	adds	r5, r2, r1
 8003f34:	42a5      	cmp	r5, r4
 8003f36:	d10b      	bne.n	8003f50 <_free_r+0x70>
 8003f38:	6824      	ldr	r4, [r4, #0]
 8003f3a:	4421      	add	r1, r4
 8003f3c:	1854      	adds	r4, r2, r1
 8003f3e:	42a3      	cmp	r3, r4
 8003f40:	6011      	str	r1, [r2, #0]
 8003f42:	d1e0      	bne.n	8003f06 <_free_r+0x26>
 8003f44:	681c      	ldr	r4, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	6053      	str	r3, [r2, #4]
 8003f4a:	4421      	add	r1, r4
 8003f4c:	6011      	str	r1, [r2, #0]
 8003f4e:	e7da      	b.n	8003f06 <_free_r+0x26>
 8003f50:	d902      	bls.n	8003f58 <_free_r+0x78>
 8003f52:	230c      	movs	r3, #12
 8003f54:	6003      	str	r3, [r0, #0]
 8003f56:	e7d6      	b.n	8003f06 <_free_r+0x26>
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	1961      	adds	r1, r4, r5
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	bf04      	itt	eq
 8003f60:	6819      	ldreq	r1, [r3, #0]
 8003f62:	685b      	ldreq	r3, [r3, #4]
 8003f64:	6063      	str	r3, [r4, #4]
 8003f66:	bf04      	itt	eq
 8003f68:	1949      	addeq	r1, r1, r5
 8003f6a:	6021      	streq	r1, [r4, #0]
 8003f6c:	6054      	str	r4, [r2, #4]
 8003f6e:	e7ca      	b.n	8003f06 <_free_r+0x26>
 8003f70:	b003      	add	sp, #12
 8003f72:	bd30      	pop	{r4, r5, pc}
 8003f74:	200001a4 	.word	0x200001a4

08003f78 <sbrk_aligned>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	4e0e      	ldr	r6, [pc, #56]	; (8003fb4 <sbrk_aligned+0x3c>)
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	6831      	ldr	r1, [r6, #0]
 8003f80:	4605      	mov	r5, r0
 8003f82:	b911      	cbnz	r1, 8003f8a <sbrk_aligned+0x12>
 8003f84:	f000 f8bc 	bl	8004100 <_sbrk_r>
 8003f88:	6030      	str	r0, [r6, #0]
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f000 f8b7 	bl	8004100 <_sbrk_r>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	d00a      	beq.n	8003fac <sbrk_aligned+0x34>
 8003f96:	1cc4      	adds	r4, r0, #3
 8003f98:	f024 0403 	bic.w	r4, r4, #3
 8003f9c:	42a0      	cmp	r0, r4
 8003f9e:	d007      	beq.n	8003fb0 <sbrk_aligned+0x38>
 8003fa0:	1a21      	subs	r1, r4, r0
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	f000 f8ac 	bl	8004100 <_sbrk_r>
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d101      	bne.n	8003fb0 <sbrk_aligned+0x38>
 8003fac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	200001a8 	.word	0x200001a8

08003fb8 <_malloc_r>:
 8003fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbc:	1ccd      	adds	r5, r1, #3
 8003fbe:	f025 0503 	bic.w	r5, r5, #3
 8003fc2:	3508      	adds	r5, #8
 8003fc4:	2d0c      	cmp	r5, #12
 8003fc6:	bf38      	it	cc
 8003fc8:	250c      	movcc	r5, #12
 8003fca:	2d00      	cmp	r5, #0
 8003fcc:	4607      	mov	r7, r0
 8003fce:	db01      	blt.n	8003fd4 <_malloc_r+0x1c>
 8003fd0:	42a9      	cmp	r1, r5
 8003fd2:	d905      	bls.n	8003fe0 <_malloc_r+0x28>
 8003fd4:	230c      	movs	r3, #12
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	2600      	movs	r6, #0
 8003fda:	4630      	mov	r0, r6
 8003fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fe0:	4e2e      	ldr	r6, [pc, #184]	; (800409c <_malloc_r+0xe4>)
 8003fe2:	f000 f89d 	bl	8004120 <__malloc_lock>
 8003fe6:	6833      	ldr	r3, [r6, #0]
 8003fe8:	461c      	mov	r4, r3
 8003fea:	bb34      	cbnz	r4, 800403a <_malloc_r+0x82>
 8003fec:	4629      	mov	r1, r5
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f7ff ffc2 	bl	8003f78 <sbrk_aligned>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	d14d      	bne.n	8004096 <_malloc_r+0xde>
 8003ffa:	6834      	ldr	r4, [r6, #0]
 8003ffc:	4626      	mov	r6, r4
 8003ffe:	2e00      	cmp	r6, #0
 8004000:	d140      	bne.n	8004084 <_malloc_r+0xcc>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	4631      	mov	r1, r6
 8004006:	4638      	mov	r0, r7
 8004008:	eb04 0803 	add.w	r8, r4, r3
 800400c:	f000 f878 	bl	8004100 <_sbrk_r>
 8004010:	4580      	cmp	r8, r0
 8004012:	d13a      	bne.n	800408a <_malloc_r+0xd2>
 8004014:	6821      	ldr	r1, [r4, #0]
 8004016:	3503      	adds	r5, #3
 8004018:	1a6d      	subs	r5, r5, r1
 800401a:	f025 0503 	bic.w	r5, r5, #3
 800401e:	3508      	adds	r5, #8
 8004020:	2d0c      	cmp	r5, #12
 8004022:	bf38      	it	cc
 8004024:	250c      	movcc	r5, #12
 8004026:	4629      	mov	r1, r5
 8004028:	4638      	mov	r0, r7
 800402a:	f7ff ffa5 	bl	8003f78 <sbrk_aligned>
 800402e:	3001      	adds	r0, #1
 8004030:	d02b      	beq.n	800408a <_malloc_r+0xd2>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	442b      	add	r3, r5
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	e00e      	b.n	8004058 <_malloc_r+0xa0>
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	1b52      	subs	r2, r2, r5
 800403e:	d41e      	bmi.n	800407e <_malloc_r+0xc6>
 8004040:	2a0b      	cmp	r2, #11
 8004042:	d916      	bls.n	8004072 <_malloc_r+0xba>
 8004044:	1961      	adds	r1, r4, r5
 8004046:	42a3      	cmp	r3, r4
 8004048:	6025      	str	r5, [r4, #0]
 800404a:	bf18      	it	ne
 800404c:	6059      	strne	r1, [r3, #4]
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	bf08      	it	eq
 8004052:	6031      	streq	r1, [r6, #0]
 8004054:	5162      	str	r2, [r4, r5]
 8004056:	604b      	str	r3, [r1, #4]
 8004058:	4638      	mov	r0, r7
 800405a:	f104 060b 	add.w	r6, r4, #11
 800405e:	f000 f865 	bl	800412c <__malloc_unlock>
 8004062:	f026 0607 	bic.w	r6, r6, #7
 8004066:	1d23      	adds	r3, r4, #4
 8004068:	1af2      	subs	r2, r6, r3
 800406a:	d0b6      	beq.n	8003fda <_malloc_r+0x22>
 800406c:	1b9b      	subs	r3, r3, r6
 800406e:	50a3      	str	r3, [r4, r2]
 8004070:	e7b3      	b.n	8003fda <_malloc_r+0x22>
 8004072:	6862      	ldr	r2, [r4, #4]
 8004074:	42a3      	cmp	r3, r4
 8004076:	bf0c      	ite	eq
 8004078:	6032      	streq	r2, [r6, #0]
 800407a:	605a      	strne	r2, [r3, #4]
 800407c:	e7ec      	b.n	8004058 <_malloc_r+0xa0>
 800407e:	4623      	mov	r3, r4
 8004080:	6864      	ldr	r4, [r4, #4]
 8004082:	e7b2      	b.n	8003fea <_malloc_r+0x32>
 8004084:	4634      	mov	r4, r6
 8004086:	6876      	ldr	r6, [r6, #4]
 8004088:	e7b9      	b.n	8003ffe <_malloc_r+0x46>
 800408a:	230c      	movs	r3, #12
 800408c:	603b      	str	r3, [r7, #0]
 800408e:	4638      	mov	r0, r7
 8004090:	f000 f84c 	bl	800412c <__malloc_unlock>
 8004094:	e7a1      	b.n	8003fda <_malloc_r+0x22>
 8004096:	6025      	str	r5, [r4, #0]
 8004098:	e7de      	b.n	8004058 <_malloc_r+0xa0>
 800409a:	bf00      	nop
 800409c:	200001a4 	.word	0x200001a4

080040a0 <_realloc_r>:
 80040a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a4:	4680      	mov	r8, r0
 80040a6:	4614      	mov	r4, r2
 80040a8:	460e      	mov	r6, r1
 80040aa:	b921      	cbnz	r1, 80040b6 <_realloc_r+0x16>
 80040ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040b0:	4611      	mov	r1, r2
 80040b2:	f7ff bf81 	b.w	8003fb8 <_malloc_r>
 80040b6:	b92a      	cbnz	r2, 80040c4 <_realloc_r+0x24>
 80040b8:	f7ff ff12 	bl	8003ee0 <_free_r>
 80040bc:	4625      	mov	r5, r4
 80040be:	4628      	mov	r0, r5
 80040c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c4:	f000 f838 	bl	8004138 <_malloc_usable_size_r>
 80040c8:	4284      	cmp	r4, r0
 80040ca:	4607      	mov	r7, r0
 80040cc:	d802      	bhi.n	80040d4 <_realloc_r+0x34>
 80040ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040d2:	d812      	bhi.n	80040fa <_realloc_r+0x5a>
 80040d4:	4621      	mov	r1, r4
 80040d6:	4640      	mov	r0, r8
 80040d8:	f7ff ff6e 	bl	8003fb8 <_malloc_r>
 80040dc:	4605      	mov	r5, r0
 80040de:	2800      	cmp	r0, #0
 80040e0:	d0ed      	beq.n	80040be <_realloc_r+0x1e>
 80040e2:	42bc      	cmp	r4, r7
 80040e4:	4622      	mov	r2, r4
 80040e6:	4631      	mov	r1, r6
 80040e8:	bf28      	it	cs
 80040ea:	463a      	movcs	r2, r7
 80040ec:	f7ff fed0 	bl	8003e90 <memcpy>
 80040f0:	4631      	mov	r1, r6
 80040f2:	4640      	mov	r0, r8
 80040f4:	f7ff fef4 	bl	8003ee0 <_free_r>
 80040f8:	e7e1      	b.n	80040be <_realloc_r+0x1e>
 80040fa:	4635      	mov	r5, r6
 80040fc:	e7df      	b.n	80040be <_realloc_r+0x1e>
	...

08004100 <_sbrk_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d06      	ldr	r5, [pc, #24]	; (800411c <_sbrk_r+0x1c>)
 8004104:	2300      	movs	r3, #0
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	602b      	str	r3, [r5, #0]
 800410c:	f7fc fd20 	bl	8000b50 <_sbrk>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_sbrk_r+0x1a>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_sbrk_r+0x1a>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	200001ac 	.word	0x200001ac

08004120 <__malloc_lock>:
 8004120:	4801      	ldr	r0, [pc, #4]	; (8004128 <__malloc_lock+0x8>)
 8004122:	f000 b811 	b.w	8004148 <__retarget_lock_acquire_recursive>
 8004126:	bf00      	nop
 8004128:	200001b0 	.word	0x200001b0

0800412c <__malloc_unlock>:
 800412c:	4801      	ldr	r0, [pc, #4]	; (8004134 <__malloc_unlock+0x8>)
 800412e:	f000 b80c 	b.w	800414a <__retarget_lock_release_recursive>
 8004132:	bf00      	nop
 8004134:	200001b0 	.word	0x200001b0

08004138 <_malloc_usable_size_r>:
 8004138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800413c:	1f18      	subs	r0, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	bfbc      	itt	lt
 8004142:	580b      	ldrlt	r3, [r1, r0]
 8004144:	18c0      	addlt	r0, r0, r3
 8004146:	4770      	bx	lr

08004148 <__retarget_lock_acquire_recursive>:
 8004148:	4770      	bx	lr

0800414a <__retarget_lock_release_recursive>:
 800414a:	4770      	bx	lr

0800414c <_init>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	bf00      	nop
 8004150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004152:	bc08      	pop	{r3}
 8004154:	469e      	mov	lr, r3
 8004156:	4770      	bx	lr

08004158 <_fini>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr
